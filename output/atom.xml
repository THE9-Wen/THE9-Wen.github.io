<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>Gridea</title>
    <updated>2021-07-03T14:07:50.197Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[王道考研操作系统笔记]]></title>
        <id>http://localhost:4000/post/wang-dao-kao-yan-cao-zuo-xi-tong-bi-ji/</id>
        <link href="http://localhost:4000/post/wang-dao-kao-yan-cao-zuo-xi-tong-bi-ji/">
        </link>
        <updated>2021-07-03T14:06:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="调度算法">调度算法</h1>
<p>适用于批处理系统：</p>
<p>先来先服务算法</p>
<p>短作业优先算法</p>
<p>适用于交互式系统：</p>
<p>时间片轮转调度算法</p>
<p>非抢占式优先级调度算法</p>
<p>抢占式优先级调度算法</p>
<p>多级反馈队列调度算法</p>
<p>补充：有的操作系统会根据优先级调整就绪队列</p>
<p>通常：</p>
<p>系统进程优先级高于用户进程</p>
<p>前台进程优先级高于用户进程</p>
<p>操作系统会优先处理I/O繁忙型的进程（可以尽早地让I/O设备与CPU并行）</p>
<p>进程同步与进程互斥</p>
<p>异步：各并发执行的进程以格子独立的、不可预知的速度向前推进</p>
<p>同步：必须按照一定次序执行 进程之间的之间制约关系</p>
<p>进程同步的机制</p>
<p>进程互斥：互斥共享的资源 当一个进程需要访问临界资源时，其他的资源必须等待 进程之间的间接互斥关系</p>
<p>进入区 // 上锁</p>
<p>临界区 // 访问临界资源</p>
<p>退出区 // 解锁</p>
<p>剩余区 // 做其他事情</p>
<p>进程互斥的四个原则</p>
<ol>
<li>空闲让进</li>
<li>忙则等待</li>
<li>有限等待</li>
<li>让权等待</li>
</ol>
<p>进程互斥的软件实现方法</p>
<ul>
<li>单标志法
<ul>
<li>每个进程进入临界区的权限只能被另一个进程赋予</li>
</ul>
</li>
<li>双标志先检查</li>
<li>双标志后检查</li>
<li>Peterson算法</li>
</ul>
<p>通过两个进程并发进行分析</p>
<p>进程互斥的硬件实现方法</p>
<ul>
<li>中断屏蔽方法
<ul>
<li>关中断</li>
<li>临界区</li>
<li>开中断</li>
</ul>
</li>
<li>TestAndSet指令 TSL指令</li>
<li>Swap指令</li>
</ul>
<p>信号量机制</p>
<p>吸烟者问题</p>
<p>读者写者问题</p>
<p>共享文件</p>
<p>读者可以同时读文件</p>
<p>写进程和其他所有的进程同时访问文件时可能发生数据不一致的问题</p>
<p>P是枷锁 V是解锁</p>
<p>使用count计数</p>
<p>第一个读进程负责加锁，否则直接进入</p>
<p>最后一个读完的进程负责解锁 注意加锁解锁的过程需要一个互斥信号量保证原子性</p>
<p>问题：如果有源源不断的读进程，可能写进程会出现饥饿</p>
<p>多层的互斥变量 P V 操作</p>
<p>读写公平法</p>
<p>哲学家进餐问题</p>
<p>哲学家： 思考 进餐</p>
<p>避免死锁</p>
<p>定义互斥信号量数组</p>
<p>需要添加条件：</p>
<ul>
<li>方案一：至少需要有一个筷子留在桌子上</li>
<li>方案二：哲学家需要在两边都有筷子的时候才能拿起筷子</li>
</ul>
<p>管程</p>
<ol>
<li>
<p>为什么引入管程</p>
<p>管程出现之前使用信号量机制实现同步和互斥</p>
<p>管程是一种高级的同步与互斥机制</p>
</li>
<li>
<p>管程的定义和基本特征</p>
<p>定义：一种同属的软件模块，组成：</p>
<ul>
<li>共享数据结构（类似于属性）</li>
<li>一组过程（类似于方法）</li>
<li>初始化的语句（类似于构造器）</li>
<li>一个名字（类似于类名）</li>
</ul>
<p>类似于一个类</p>
<p>基本特征：</p>
<ol>
<li>局部管程的数据只能由局部管程的过程访问</li>
<li>调用管程内部的过程访问管程共享数据</li>
<li>每次仅允许一个进程在管程内执行某一个内部过程（同一时刻只有一个进程在使用管程中的某一个函数）</li>
</ol>
<p>程序员不需要关心是如何实现同步的，只需要调用管程的过程就可以实现同步和互斥</p>
<p>java里面的管程：<code>synchronized</code>关键字</p>
<p>练习：在java里面实现生产者消费者问题</p>
</li>
</ol>
<p>死锁的概念</p>
<p>例子：哲学家问题（每一个哲学家都持有左手的筷子并且在等待右手的筷子）</p>
<p>每个人都持有一个资源并且在等待其他的资源</p>
<p>区别：死锁、饥饿、死循环 都是程序发生了一些同属状况无法继续推进</p>
<p>死锁：至少要有两个进程，进程一定处于阻塞态</p>
<p>饥饿：可能只有一个进程发生饥饿，可能处于就绪（长期等待CPU）或阻塞（长期等待I/O）态</p>
<p>死循环：可能只有一个进程，可能处于运行态</p>
<p>必要条件：</p>
<ol>
<li>互斥条件</li>
<li>不可剥夺条件（得到之前除非自己放弃不可被别人抢夺）</li>
<li>请求和保持条件（进程持有至少一个资源，又提出了新的请求，但又对自己的资源不放）</li>
<li>循环等待条件（发生了循环等待不一定发生了死锁，但是发生了死锁一定会出现循环等待）</li>
</ol>
<p>合适会发生死锁：对不可剥夺的资源分配不合理时</p>
<ol>
<li>对系统资源的竞争</li>
<li>不合理的进程推进顺序</li>
<li>P V操作设计不合理</li>
</ol>
<p>预防死锁</p>
<p>避免死锁</p>
<p>死锁的检测和解除</p>
<p>预防死锁</p>
<ol>
<li>
<p>破坏互斥条件</p>
<p>SPOOLing技术</p>
<p>举例：打印机是独占设备，添加一个输出进程托管打印机</p>
</li>
<li>
<p>破坏不剥夺条件</p>
<p>方案一：当某个进程请求的资源的不到满足时，释放所有的资源</p>
<p>方案二：由操作系统协助，根据优先级剥夺资源</p>
</li>
<li>
<p>破坏请求和保持条件</p>
<p>方案一：采用静态分配方法，即一次申请全部的资源，在没有满足之前不投入运行</p>
</li>
<li>
<p>破坏循环等待条件</p>
<p>顺序资源分配法：给系统的资源编号，规定必须按照编号递增的顺序请求资源</p>
<p>必定有一个进程获得资源的编号是最大的，他申请资源的过程一定是畅通无阻的</p>
</li>
</ol>
<p>这些策略或多或少都有一些缺陷</p>
<p>前后联系</p>
<p>避免死锁（非常重要）</p>
<p>安全序列：</p>
<p>如果系统按照安全序列分配资源，则每一个进程都可以顺利完成</p>
<p>系统中找不出一个安全序列，那么系统处于不安全状态</p>
<p>系统处于安全状态，那么一定不会发生死锁；如果处于不安全状态，那么可能对发生死锁</p>
<p>银行家算法：</p>
<p>核心思想：如果一次资源分配会使得系统处于不安全状态，那么可以进行这一次的资源分配</p>
<p>算法：</p>
<p>系统有n个进程 m种资源</p>
<p>最大需求矩阵Max</p>
<p>分配矩阵Allocation</p>
<p>Need矩阵</p>
<p>死锁的检测与解除</p>
<ol>
<li>利用某一种数据结构来保存资源的请求和分配信息</li>
<li>提供一种算法，利用上述信息来检测系统是否进入死锁状态</li>
</ol>
<p>数据结构：图</p>
<p>算法：如果可以消除所有的边那么没有发生死锁，如果不能消除所有的边，那么已经发生了死锁</p>
<p>​	依次消除与不阻塞（系统可以提供进程前申请的资源）进程相连的边，直到无边可消</p>
<p>在一个系统中不一定所有的进程都发生了死锁</p>
<p>解除死锁的方法：</p>
<ol>
<li>资源剥夺法</li>
<li>撤销进程法：代价比较大</li>
<li>进程回退法：操作系统需要记录进程的历史信息，不太容易实现</li>
</ol>
<p>如何决定对谁动手？</p>
<ul>
<li>进程的优先级</li>
<li>已执行的时间</li>
<li>还需要多久完成</li>
<li>进程已经使用了多少资源</li>
<li>优先牺牲批处理的</li>
</ul>
<h1 id="内存管理">内存管理</h1>
<h2 id="什么是内存">什么是内存</h2>
<p>程序在执行之前需要先放到内存中才能被CPU处理</p>
<p>如何区分各个程序的信息储存在了内存的哪个地方？</p>
<p>内存地址</p>
<p>每一个内存地址对应一个存储单元 各个计算机可能不同 按字节编址 每一个储存单元1B 按字编址</p>
<p>进程的运行原理：指令</p>
<p>寄存器</p>
<p>物理地址：起始地址+相对地址</p>
<p>逻辑地址（相对地址）：</p>
<p>写程序到程序运行</p>
<p>编译：把高级语言翻译为机器语言</p>
<p>链接：产生完整的逻辑地址</p>
<p>装入：</p>
<p>绝对装入：在编译的时候就知道程序会存放在内存的哪一个位置</p>
<p>静态重定位：装入的时候由装入程序计算地址，装入之后就不可以移动了</p>
<p>动态重定位：逻辑地址到物理地址的转换在程序运行时才会进行</p>
<h3 id="内存管理的概念">内存管理的概念</h3>
<p>内存管理要做些什么？</p>
<ol>
<li>内存空间的分配与回收</li>
<li>虚拟技术（操作系统的虚拟性）</li>
<li>地址转换（地址重定位由操作系统进行）</li>
<li>内存保护（各个进程在各自的内存空间内运行）
<ul>
<li>两种方式：1. 设置上下限寄存器 2. 利用重定位寄存器、界地址寄存器进行判断</li>
</ul>
</li>
</ol>
<p>覆盖与交换</p>
<p>内存空间的扩充：</p>
<p><strong>覆盖技术</strong></p>
<p>解决程序大小超过物理内存总和的问题</p>
<p>常用的段放在固定区</p>
<p>不常用的段放在覆盖区</p>
<p>让不可能被同时访问的程序段共享一个覆盖区</p>
<p><strong>交换技术</strong></p>
<p>中级调度</p>
<p>低级调度</p>
<p>高级调度</p>
<p>挂起</p>
<p>进程的七状态模型</p>
<p>PCB会常驻内存</p>
<p>应该在外存的什么位置保存被换出的进程？</p>
<p>对换区 连续分配的方式 I/O速度比文件区更快</p>
<p>什么时候进行交换？</p>
<p>内存紧张的时候</p>
<p>应该换出什么进程？</p>
<p>阻塞态的进程</p>
<p>优先级比较低的进程</p>
<p>考虑进程在内存中驻留的时间</p>
<p>覆盖与交换的区别：</p>
<p>覆盖：在同一个进程中</p>
<p>交换：不同的进程</p>
<p>内存空间的分配与回收：</p>
<ol>
<li>连续分配管理方式</li>
<li>离散分配方式</li>
</ol>
<p>单一连续分配：</p>
<p>内存被分为系统区和用户区</p>
<p>固定分区分配方式</p>
<p>用户分区被分为若干个固定大小的分区，每个分区只装入一个作业</p>
<ul>
<li>分区大小相等</li>
<li>分区大小不相等</li>
</ul>
<h3 id="连续分配管理方式">连续分配管理方式</h3>
<p>单一连续分配</p>
<p>固定分区分配</p>
<p>动态分区分配</p>
<ol>
<li>
<p>单一连续分配（有内部碎片）</p>
<p>系统区</p>
<p>用户区</p>
<p>某一个作业独占用户区</p>
</li>
<li>
<p>固定分区分配（有内部碎片）</p>
<p>用户区被划分为若干个固定大小的分区</p>
<p>每一个分区可以装入一道作业</p>
<p>分区大小相等</p>
<p>分区大小不相等</p>
</li>
<li>
<p>动态分区分配（有外部碎片）</p>
<p>在进程装入内存的时候才会动态地建立分区</p>
<ul>
<li>
<p>系统应该用什么样的数据结构记录内存的使用情况呢？</p>
<ul>
<li>空闲分区表	分区号 分区大小 起始地址</li>
<li>空闲分区链</li>
</ul>
</li>
<li>
<p>当内存中有很多个空闲分区可以满足需求的时候应该选择那个分区进行分配呢？</p>
<ul>
<li>动态分区分配算法（对性能的影响很大）</li>
</ul>
</li>
<li>
<p>如何进行分区的分配与回收操作</p>
<ul>
<li>相邻的空闲分区合并</li>
<li>如果前后都没有空闲分区，则在空闲分区表添加一个分区</li>
</ul>
</li>
<li>
<p>动态分区分配</p>
<ul>
<li>内部碎片：分配给某进程的内存区域中，没有被用上的部分</li>
<li>外部碎片：内存中的部分空闲分区太小以至于难以利用</li>
</ul>
<p>紧凑技术</p>
</li>
</ul>
</li>
</ol>
<h3 id="动态分区分配算法">动态分区分配算法</h3>
<p><strong>首次适应算法</strong></p>
<p>每次从低地址开始查找，找到第一个能满足大小的空闲分区</p>
<p><strong>最佳适应算法</strong></p>
<p>空闲分区按照容量递增的次序链接</p>
<p>每一次都选择最小的分区进行适配，会留下来越来越多的小碎片</p>
<p><strong>最坏适应算法</strong></p>
<p>空闲分区按照递减的顺序排列</p>
<p>可能缺少大的连续的内存</p>
<p><strong>临近适应算法</strong></p>
<p>从上一次查找结束的位置开始查找空闲分区链</p>
<p>高地址地区更有可能会被划分成更小的分区</p>
<h3 id="基本分页存储">基本分页存储</h3>
<p>让一个进程分散地存到内存的不同地方</p>
<h3 id="非连续分配的方式">非连续分配的方式</h3>
<p>基本分页存储</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>http://localhost:4000/post/hello-gridea/</id>
        <link href="http://localhost:4000/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>
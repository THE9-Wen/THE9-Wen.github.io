{
  "posts": [
    {
      "content": "# 调度算法\n\n适用于批处理系统：\n\n先来先服务算法\n\n短作业优先算法\n\n适用于交互式系统：\n\n时间片轮转调度算法\n\n非抢占式优先级调度算法\n\n抢占式优先级调度算法\n\n多级反馈队列调度算法\n\n补充：有的操作系统会根据优先级调整就绪队列\n\n\n\n通常：\n\n系统进程优先级高于用户进程\n\n前台进程优先级高于用户进程\n\n操作系统会优先处理I/O繁忙型的进程（可以尽早地让I/O设备与CPU并行）\n\n\n\n进程同步与进程互斥\n\n异步：各并发执行的进程以格子独立的、不可预知的速度向前推进\n\n同步：必须按照一定次序执行 进程之间的之间制约关系\n\n进程同步的机制\n\n进程互斥：互斥共享的资源 当一个进程需要访问临界资源时，其他的资源必须等待 进程之间的间接互斥关系\n\n进入区 // 上锁\n\n临界区 // 访问临界资源\n\n退出区 // 解锁\n\n剩余区 // 做其他事情\n\n\n\n进程互斥的四个原则\n\n1. 空闲让进\n2. 忙则等待\n3. 有限等待\n4. 让权等待\n\n\n\n进程互斥的软件实现方法\n\n- 单标志法\n  - 每个进程进入临界区的权限只能被另一个进程赋予\n- 双标志先检查\n- 双标志后检查\n- Peterson算法\n\n通过两个进程并发进行分析\n\n\n\n进程互斥的硬件实现方法\n\n- 中断屏蔽方法\n  - 关中断\n  - 临界区\n  - 开中断\n- TestAndSet指令 TSL指令\n- Swap指令\n\n\n\n信号量机制\n\n\n\n\n\n吸烟者问题\n\n\n\n\n\n读者写者问题\n\n共享文件\n\n读者可以同时读文件\n\n写进程和其他所有的进程同时访问文件时可能发生数据不一致的问题\n\nP是枷锁 V是解锁\n\n使用count计数\n\n第一个读进程负责加锁，否则直接进入\n\n最后一个读完的进程负责解锁 注意加锁解锁的过程需要一个互斥信号量保证原子性\n\n问题：如果有源源不断的读进程，可能写进程会出现饥饿\n\n多层的互斥变量 P V 操作 \n\n读写公平法\n\n\n\n哲学家进餐问题\n\n哲学家： 思考 进餐\n\n避免死锁\n\n定义互斥信号量数组\n\n需要添加条件：\n\n- 方案一：至少需要有一个筷子留在桌子上\n- 方案二：哲学家需要在两边都有筷子的时候才能拿起筷子\n\n\n\n管程\n\n1. 为什么引入管程\n\n   管程出现之前使用信号量机制实现同步和互斥\n\n   管程是一种高级的同步与互斥机制\n\n2. 管程的定义和基本特征\n\n   定义：一种同属的软件模块，组成：\n\n   - 共享数据结构（类似于属性）\n   - 一组过程（类似于方法）\n   - 初始化的语句（类似于构造器）\n   - 一个名字（类似于类名）\n\n   类似于一个类\n\n   基本特征：\n\n   1. 局部管程的数据只能由局部管程的过程访问\n   2. 调用管程内部的过程访问管程共享数据\n   3. 每次仅允许一个进程在管程内执行某一个内部过程（同一时刻只有一个进程在使用管程中的某一个函数）\n\n   程序员不需要关心是如何实现同步的，只需要调用管程的过程就可以实现同步和互斥\n\n   java里面的管程：`synchronized`关键字\n\n   练习：在java里面实现生产者消费者问题\n\n\n\n死锁的概念\n\n例子：哲学家问题（每一个哲学家都持有左手的筷子并且在等待右手的筷子）\n\n每个人都持有一个资源并且在等待其他的资源\n\n区别：死锁、饥饿、死循环 都是程序发生了一些同属状况无法继续推进\n\n死锁：至少要有两个进程，进程一定处于阻塞态\n\n饥饿：可能只有一个进程发生饥饿，可能处于就绪（长期等待CPU）或阻塞（长期等待I/O）态\n\n死循环：可能只有一个进程，可能处于运行态\n\n必要条件：\n\n1. 互斥条件\n2. 不可剥夺条件（得到之前除非自己放弃不可被别人抢夺）\n3. 请求和保持条件（进程持有至少一个资源，又提出了新的请求，但又对自己的资源不放）\n4. 循环等待条件（发生了循环等待不一定发生了死锁，但是发生了死锁一定会出现循环等待）\n\n合适会发生死锁：对不可剥夺的资源分配不合理时\n\n1. 对系统资源的竞争\n2. 不合理的进程推进顺序\n3. P V操作设计不合理\n\n\n\n预防死锁\n\n避免死锁\n\n死锁的检测和解除\n\n\n\n预防死锁\n\n1. 破坏互斥条件\n\n   SPOOLing技术\n\n   举例：打印机是独占设备，添加一个输出进程托管打印机\n\n2. 破坏不剥夺条件\n\n   方案一：当某个进程请求的资源的不到满足时，释放所有的资源\n\n   方案二：由操作系统协助，根据优先级剥夺资源\n\n3. 破坏请求和保持条件\n\n   方案一：采用静态分配方法，即一次申请全部的资源，在没有满足之前不投入运行\n\n4. 破坏循环等待条件\n\n   顺序资源分配法：给系统的资源编号，规定必须按照编号递增的顺序请求资源\n\n   必定有一个进程获得资源的编号是最大的，他申请资源的过程一定是畅通无阻的\n\n这些策略或多或少都有一些缺陷\n\n前后联系\n\n\n\n避免死锁（非常重要）\n\n安全序列：\n\n如果系统按照安全序列分配资源，则每一个进程都可以顺利完成\n\n系统中找不出一个安全序列，那么系统处于不安全状态\n\n系统处于安全状态，那么一定不会发生死锁；如果处于不安全状态，那么可能对发生死锁\n\n银行家算法：\n\n核心思想：如果一次资源分配会使得系统处于不安全状态，那么可以进行这一次的资源分配\n\n\n\n算法：\n\n系统有n个进程 m种资源\n\n最大需求矩阵Max\n\n分配矩阵Allocation\n\nNeed矩阵\n\n\n\n死锁的检测与解除\n\n1. 利用某一种数据结构来保存资源的请求和分配信息\n2. 提供一种算法，利用上述信息来检测系统是否进入死锁状态\n\n数据结构：图\n\n算法：如果可以消除所有的边那么没有发生死锁，如果不能消除所有的边，那么已经发生了死锁\n\n​\t依次消除与不阻塞（系统可以提供进程前申请的资源）进程相连的边，直到无边可消\n\n在一个系统中不一定所有的进程都发生了死锁\n\n解除死锁的方法：\n\n1. 资源剥夺法\n2. 撤销进程法：代价比较大\n3. 进程回退法：操作系统需要记录进程的历史信息，不太容易实现\n\n如何决定对谁动手？\n\n- 进程的优先级\n- 已执行的时间\n- 还需要多久完成\n- 进程已经使用了多少资源\n- 优先牺牲批处理的\n\n\n\n\n\n# 内存管理\n\n## 什么是内存\n\n程序在执行之前需要先放到内存中才能被CPU处理\n\n如何区分各个程序的信息储存在了内存的哪个地方？\n\n内存地址\n\n每一个内存地址对应一个存储单元 各个计算机可能不同 按字节编址 每一个储存单元1B 按字编址\n\n\n\n进程的运行原理：指令\n\n寄存器\n\n\n\n物理地址：起始地址+相对地址\n\n逻辑地址（相对地址）：\n\n\n\n写程序到程序运行\n\n编译：把高级语言翻译为机器语言\n\n链接：产生完整的逻辑地址\n\n装入：\n\n\n\n绝对装入：在编译的时候就知道程序会存放在内存的哪一个位置\n\n静态重定位：装入的时候由装入程序计算地址，装入之后就不可以移动了\n\n动态重定位：逻辑地址到物理地址的转换在程序运行时才会进行\n\n\n\n### 内存管理的概念\n\n内存管理要做些什么？\n\n1. 内存空间的分配与回收\n2. 虚拟技术（操作系统的虚拟性）\n3. 地址转换（地址重定位由操作系统进行）\n4. 内存保护（各个进程在各自的内存空间内运行）\n   - 两种方式：1. 设置上下限寄存器 2. 利用重定位寄存器、界地址寄存器进行判断\n\n\n\n覆盖与交换\n\n内存空间的扩充：\n\n**覆盖技术**\n\n解决程序大小超过物理内存总和的问题\n\n常用的段放在固定区\n\n不常用的段放在覆盖区\n\n让不可能被同时访问的程序段共享一个覆盖区\n\n\n\n**交换技术**\n\n中级调度\n\n低级调度\n\n高级调度\n\n挂起\n\n进程的七状态模型\n\n\n\nPCB会常驻内存\n\n\n\n应该在外存的什么位置保存被换出的进程？\n\n对换区 连续分配的方式 I/O速度比文件区更快\n\n\n\n什么时候进行交换？\n\n内存紧张的时候\n\n\n\n应该换出什么进程？\n\n阻塞态的进程\n\n优先级比较低的进程\n\n考虑进程在内存中驻留的时间\n\n\n\n覆盖与交换的区别：\n\n覆盖：在同一个进程中\n\n交换：不同的进程\n\n\n\n内存空间的分配与回收：\n\n1. 连续分配管理方式\n2. 离散分配方式\n\n单一连续分配：\n\n内存被分为系统区和用户区\n\n\n\n固定分区分配方式\n\n用户分区被分为若干个固定大小的分区，每个分区只装入一个作业\n\n- 分区大小相等\n- 分区大小不相等\n\n\n\n### 连续分配管理方式\n\n单一连续分配\n\n固定分区分配\n\n动态分区分配\n\n\n\n1. 单一连续分配（有内部碎片）\n\n   系统区\n\n   用户区\n\n   某一个作业独占用户区\n\n2. 固定分区分配（有内部碎片）\n\n   用户区被划分为若干个固定大小的分区\n\n   每一个分区可以装入一道作业\n\n   分区大小相等\n\n   分区大小不相等\n\n3. 动态分区分配（有外部碎片）\n\n   在进程装入内存的时候才会动态地建立分区\n\n   - 系统应该用什么样的数据结构记录内存的使用情况呢？\n\n     - 空闲分区表\t分区号 分区大小 起始地址\n     - 空闲分区链\n\n   - 当内存中有很多个空闲分区可以满足需求的时候应该选择那个分区进行分配呢？\n\n     - 动态分区分配算法（对性能的影响很大）\n\n   - 如何进行分区的分配与回收操作\n\n     - 相邻的空闲分区合并\n     - 如果前后都没有空闲分区，则在空闲分区表添加一个分区\n\n   - 动态分区分配\n\n     - 内部碎片：分配给某进程的内存区域中，没有被用上的部分\n     - 外部碎片：内存中的部分空闲分区太小以至于难以利用\n\n     紧凑技术\n\n\n\n### 动态分区分配算法\n\n**首次适应算法**\n\n每次从低地址开始查找，找到第一个能满足大小的空闲分区\n\n**最佳适应算法**\n\n空闲分区按照容量递增的次序链接\n\n每一次都选择最小的分区进行适配，会留下来越来越多的小碎片\n\n**最坏适应算法**\n\n空闲分区按照递减的顺序排列\n\n可能缺少大的连续的内存\n\n**临近适应算法**\n\n从上一次查找结束的位置开始查找空闲分区链\n\n高地址地区更有可能会被划分成更小的分区\n\n\n\n### 基本分页存储\n\n让一个进程分散地存到内存的不同地方\n\n### 非连续分配的方式\n\n基本分页存储\n\n\n\n\n\n",
      "data": {
        "title": "王道考研操作系统笔记",
        "date": "2021-07-03 22:06:49",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "wang-dao-kao-yan-cao-zuo-xi-tong-bi-ji"
    },
    {
      "content": "> 欢迎来到我的小站呀，很高兴遇见你！🤝\n\n## 🏠 关于本站\n\n## 👨‍💻 博主是谁\n\n## ⛹ 兴趣爱好\n\n## 📬 联系我呀\n",
      "data": {
        "title": "关于",
        "date": "2019-01-25 19:09:48",
        "tags": null,
        "published": true,
        "hideInList": true,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    },
    {
      "content": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \n\n<!-- more -->\n\n[Github](https://github.com/getgridea/gridea)  \n[Gridea 主页](https://gridea.dev/)  \n[示例网站](http://fehey.com/)\n\n## 特性👇\n📝  你可以使用最酷的 **Markdown** 语法，进行快速创作  \n\n🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片  \n\n🏷️  你可以对文章进行标签分组  \n\n📋  你可以自定义菜单，甚至可以创建外部链接菜单  \n\n💻  你可以在 **Windows**，**MacOS** 或 **Linux** 设备上使用此客户端  \n\n🌎  你可以使用 **𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌** 或 **Coding Pages** 向世界展示，未来将支持更多平台  \n\n💬  你可以进行简单的配置，接入 [Gitalk](https://github.com/gitalk/gitalk) 或 [DisqusJS](https://github.com/SukkaW/DisqusJS) 评论系统  \n\n🇬🇧  你可以使用**中文简体**或**英语**  \n\n🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力  \n\n🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步  \n\n🌱 当然 **Gridea** 还很年轻，有很多不足，但请相信，它会不停向前 🏃\n\n未来，它一定会成为你离不开的伙伴\n\n尽情发挥你的才华吧！\n\n😘 Enjoy~\n",
      "data": {
        "title": "Hello Gridea",
        "date": "2018-12-12 00:00:00",
        "tags": [
          "Gridea"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hello-gridea.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... ",
      "fileName": "hello-gridea"
    }
  ],
  "tags": [
    {
      "name": "Gridea",
      "slug": "lBTn3TL6Z",
      "used": true
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}